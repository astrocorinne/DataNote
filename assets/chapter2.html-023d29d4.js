import{_ as a,Y as e,Z as i,$ as s}from"./framework-8c11374e.js";const n={},l=s(`<h2 id="_2-1-什么是变量" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是变量" aria-hidden="true">#</a> 2.1 什么是变量</h2><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h3><ul><li>chrome开发者工具，调出console面板</li><li><strong>Option + Command + J（Mac）</strong></li><li>Ctrl + Shift + J（Windows / Linux）</li></ul><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><ul><li>计算3+6的结果；再用第一步的结果减1，结果是多少</li><li>3+6=9 9-1=8</li><li>计算机 内存相当于草稿纸 控制台输入3+6，输出结果为9</li><li>搞清楚当计算机执行3+6，内存里面发生了哪些事情，对学习变量很重要 ![[用人类易于理解的十进制来演示-1.png]]</li></ul><p>![[第一步计算结果保存在内存-1.png]] ![[第二步会把第一步计算结果重新存储，浪费空间.png]]</p><ul><li>如果直接计算，第二步会把第一步得出的计算成果重新存储一遍再计算；这就不是我们想要的</li><li>解决方案：引入变量概念——</li></ul><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><ul><li><p><code>var a = 3 + 6</code></p></li><li><p>此时内存的计算过程发生了变化</p></li><li><p>告诉 CPU有一个字符a需要记录下来</p></li><li><p>CPU就会在内存中专门储存变量的位置记录a</p></li><li><p>“=”号不是相等，而是让CPU把3+6的计算结果储存的内存空间的编号（举例为11，实际是十六进制的很长的数字）跟a绑定在一块。 ![[=号是把计算结果的内存地址与变量绑定在一块-1.png]]</p></li><li><p>任何代码被加载到内存加载到内存中时都会占用内存空间，哪怕就是一个数字</p></li><li><p>每个内存最小的可被操作的数据存储空间都有一个地址</p></li><li><p>这个地址是用16进制的数字来表示的</p></li><li><p><strong>变量是一种指向特定内存空间的机制，是标识符的一种</strong></p></li><li><p>因此也被人成为“指针”</p></li><li><p>变量是和某个数据的内存地址绑定的</p></li><li><p>cpu可以通过访问变量来准确获取到保存在相应内存地址上的数据</p></li><li><p>我们写代码归根到底其实都是CPU在内存中各种读取、 计算、存储的过程。变量这个概念非常重要，后续写代码会不停使用。</p></li></ul><h2 id="_2-2-如何使用变量" tabindex="-1"><a class="header-anchor" href="#_2-2-如何使用变量" aria-hidden="true">#</a> 2.2 如何使用变量</h2><h3 id="代码的中空格很重要" tabindex="-1"><a class="header-anchor" href="#代码的中空格很重要" aria-hidden="true">#</a> 代码的中空格很重要</h3><ul><li>编译器就是通过空格来区分代码的不同字符是否为一个整体并以此来判断该如何编译代码</li><li>代码可读性</li><li>英文输入法符号</li></ul><h3 id="变量声明的关键字" tabindex="-1"><a class="header-anchor" href="#变量声明的关键字" aria-hidden="true">#</a> 变量声明的关键字</h3><ul><li>var</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键字和保留字" tabindex="-1"><a class="header-anchor" href="#关键字和保留字" aria-hidden="true">#</a> 关键字和保留字</h3><p>所谓关键字 就是在编程语言中有特殊意义的字符 保留字 就是在以后的语言版本中可能会变成关键字的字符 这两类字符都不可用作变量</p><p>![[JavaScript保留关键词.png]]</p><h3 id="代码的执行顺序" tabindex="-1"><a class="header-anchor" href="#代码的执行顺序" aria-hidden="true">#</a> 代码的执行顺序</h3><ul><li>目前你可以暂时认为 （后续课程中会专门讲代码执行顺序的问题）</li><li>代码是从上到下依次执行</li><li>而一行中一般是从左到右执行</li><li>但是如果一行中有赋值符号</li><li>先执行赋值符号右边 右边也是从左到右执行</li><li>然后再执行左边 比如声明变量</li><li>最后执行 赋值符号的操作</li></ul><h3 id="变量的命名规则" tabindex="-1"><a class="header-anchor" href="#变量的命名规则" aria-hidden="true">#</a> 变量的命名规则</h3><ul><li>第一个字符必须是一个字母或者 下划线_ 或者 一个美元符号 $，不能是数字</li><li>其他字符可以是字母 下划线 美元符号 或者 数字</li><li>多单词组合的变量名建议采用小驼峰式写法</li><li>变量中的英文字符是大小写敏感的</li><li>-中横线不行</li></ul><h3 id="变量使用的两个凡是" tabindex="-1"><a class="header-anchor" href="#变量使用的两个凡是" aria-hidden="true">#</a> 变量使用的两个凡是</h3><ul><li><p>声明一个变量后续都是可以一直使用的，也可以赋新的值</p></li><li><p>🙅🏻‍♀️先使用后声明，要先声明后使用</p></li><li><p>凡是你可能会使用超过一次的数据 都要先赋值给变量</p></li><li><p>凡是可能后续代码中会有用的计算结果 都要记得赋值给变量</p></li><li><p>任何不用变量承接的数据和计算结果都是耍流氓。</p></li><li><p>任何你觉得后面可能会有用的东西都要先用变量存起来。</p></li><li><p>变量的赋值可以“变”，不是直接在内存中改数据，而是CPU会在内存保存新的值，然后更改内存地址绑定。变量的“变”是指变量指向发生变化。</p></li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li>变量不能重复声明</li><li>已声明的变量可以重复使用保存其他的数据</li><li>要注意变量命名的可读性，最好能表明所指向数据的用途</li></ul><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><ul><li>在控制台输入<code>1</code>回车和<code> var a=1</code>在内存中有什么区别</li><li>在代码中只输入1个数字也是代码，CPU会在内存中找个地方创建写入一个数据1，然后代码就执行完了</li><li><code>var a=1</code></li><li>第一步，按顺序先执行赋值号右边的代码，同上；</li><li>第二步，然后执行左边：CPU在内存中专门存储变量数据的地方写入一个字符a，声明好变量；</li><li>第三步，之后开始执行赋值过程：把1这个数据内存空间地址跟变量a绑定起来</li></ul><h2 id="_2-3-垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_2-3-垃圾回收机制" aria-hidden="true">#</a> 2.3 垃圾回收机制</h2><h3 id="垃圾回收机制-garbage-collector-collection" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制-garbage-collector-collection" aria-hidden="true">#</a> 垃圾回收机制 garbage collector/collection</h3><ul><li>简称GC，是一种周期性的自动标记哪些已使用的内存空间是可被cpu再次使用的一种机制。</li><li>是一种提高内存使用效率的机制</li><li>当内存中的某个数据，没有变量（标识符）指向它，那它里面的数据在后续代码中无法通过代码访问了</li><li>那么这个内存空间 就会在下一次垃圾回收机制执行时被释放。所谓的释放并不是被清空，而是被CPU标记可以使用，也就是可以写入新的数据进行覆盖。</li><li>内存RAM(Random Access Memory)随机存取存储器：在存储数据的时候选择具体的空间并不是按空间地址编号依次选择，而是有一定随机性 ![[已变量绑定的数据内存空间不会被标记-1.png]]</li><li>某个数据所在的内存空间地址和变量绑定在一起，表明内存空间在使用当中，就不会被CPU标记写入新数据造成数据错误</li><li>某些语言需要手动标记，JS有垃圾回收机制自动标记，周期性释放空间</li><li>代码中明明没有垃圾回收机制的相关代码，那是怎么自动执行垃圾回收的呢？语言编译器在翻译代码到二进制代码过程中偷偷加进去的，我们无法感知</li></ul><h2 id="_2-4-初识基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-4-初识基本数据类型" aria-hidden="true">#</a> 2.4 初识基本数据类型</h2><ul><li>数据类型是一个抽象的概念</li><li>不同类型的数据在编程语言中扮演着不同的角色，有不同的作用</li></ul><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><ul><li>string 文字类型的数据，主要是用来表示和处理人类文字的数据类型，需要用引号包裹来表示，<strong>能够让计算机识别并按照文字类型数据来特殊处理</strong>。特定的文字字符用特定二进制编码表示，并把文字和对应二进制编码作成对照表，也叫作编码表。有两大编码表，分别是ASCII和utf-8。</li><li>number 数字类型的数据，主要是用来进行数学计算的数据类型</li><li>boolean 只有两个具体的值 ，true和false，主要用来控制代码的执行逻辑</li><li>undefined 只有一个具体的值 undefined，用来表示某个标量或者说标识符中没有具体数据</li><li>JS是一种动态类型语言</li><li>同一个变量可以用于保存任意的数据类型</li></ul><h2 id="_2-5-基本数据类型与内存" tabindex="-1"><a class="header-anchor" href="#_2-5-基本数据类型与内存" aria-hidden="true">#</a> 2.5 基本数据类型与内存</h2><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><p>通过这个看这字符的字面意思 就能知道要创建什么类型的数据以及具体多少数据了</p><p>有字面量形式的写法 在内存中就会产生新的数据</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> isMale <span class="token operator">=</span> <span class="token boolean">true</span>
isMale <span class="token operator">=</span> <span class="token boolean">true</span>
isMale <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
a <span class="token operator">=</span> <span class="token number">100</span>
a <span class="token operator">=</span> <span class="token number">100</span>
a <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值给变量" tabindex="-1"><a class="header-anchor" href="#赋值给变量" aria-hidden="true">#</a> 赋值给变量</h3><p>把某个数据赋值给某个变量，就是把这个数据的内存空间地址和这个变量的字符数据相绑定，后续代码在查找这个变量的时候，就可以找到这个变量所对应的数据</p><p>通过变量赋值给另一个变量</p><p>两个变量指向的是同一个内存地址空间的数据</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;三木&#39;</span>
<span class="token keyword">var</span> name1 <span class="token operator">=</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string">&quot;好奇代码&quot;</span>
<span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string">&quot;三木&quot;</span>
<span class="token keyword">var</span> wholeName <span class="token operator">=</span> firstName <span class="token operator">+</span> lastName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据经过运算一定会产生新的数据并储存在某个内存空间中</p><h3 id="原始值-primitive-value" tabindex="-1"><a class="header-anchor" href="#原始值-primitive-value" aria-hidden="true">#</a> 原始值 primitive value</h3><p>基本数据类型的值又被称为原始值</p><p>typeof 关键字</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">typeof</span> <span class="token string">&#39;1&#39;</span>

<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;好奇代码&quot;</span>
<span class="token keyword">typeof</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用来检测数据是是什么类型</p>`,53),r=[l];function d(p,o){return e(),i("div",null,r)}const c=a(n,[["render",d],["__file","chapter2.html.vue"]]);export{c as default};
