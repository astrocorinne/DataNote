import{_ as i,Y as a,Z as l,$ as e}from"./framework-8c11374e.js";const h={},r=e('<h2 id="_1-1-计算机、编程语言与程序" tabindex="-1"><a class="header-anchor" href="#_1-1-计算机、编程语言与程序" aria-hidden="true">#</a> 1.1 计算机、编程语言与程序</h2><h3 id="计算机核心硬件" tabindex="-1"><a class="header-anchor" href="#计算机核心硬件" aria-hidden="true">#</a> 计算机核心硬件</h3><ol><li>CPU是计算机的大脑——控制中心和计算中心，各种代码就是被CPU执行，来控制各个硬件配合，工作或者CPU中进行各种各样的运算。</li><li>内存条是和CPU配合非常紧密的一种硬件。临时数据仓库，特点：读取速度非常快但不太安全，碰到如断电之类的特殊情况数据没有及时保存（到硬盘）会消失。</li><li>硬盘是长期储存数据的仓库。读取速度慢但没电了数据都会还在。</li></ol><h4 id="要点" tabindex="-1"><a class="header-anchor" href="#要点" aria-hidden="true">#</a> 要点</h4><ul><li>CPU，内存，硬盘都是插在主板上，通过主板的电路来通信的。</li><li>启动某个程序或文件，CPU会把程序或文件复制一份到内存里后，CPU再跟内存，他们两者进行直接通信，读取写入。</li><li>当程序用完了关掉了，相应内存也会被清除。这样也会给其他程序运行腾出空间。对应地，程序开太多电脑会变卡。</li><li>JS代码也是会从硬盘加载到内存中进行执行的。只不过我们不会像去打开一个文件打开一个程序一样去让某个js文件来执行。是通过HTML这个文件去引入的。script标签。引入之后页面被打开这个js文件也会被加载到浏览器中执行，即放到内存中去执行。</li><li>js代码执行过程中会产生很多数据也是会暂时存在内存中。</li></ul><h3 id="编程语言" tabindex="-1"><a class="header-anchor" href="#编程语言" aria-hidden="true">#</a> 编程语言</h3><ul><li>编程语言都是人设计的，计算机看不懂。</li><li>所有编程语言写的代码最终会被编译器转换成二进制机器码让cpu执行。</li><li>每种编程语言都有自己的编译器，编译器也是一种程序，专门负责把该语言编写的代码翻译成二进制机器码</li></ul><h3 id="程序" tabindex="-1"><a class="header-anchor" href="#程序" aria-hidden="true">#</a> 程序</h3><ul><li>是已经被转换成二进制机器码的文件</li><li>平时用的各种程序软件APP都是已经被编译为二进制这种语言的文件。我们在屏幕上之所以能看到各种内容，是操作系统通过一些方式把这些二进制的数据转换成我们能理解的且好使用的一种表现形式。是一种假象。本质都是二进制的数据。</li></ul><h4 id="代码从编写到执行的全过程" tabindex="-1"><a class="header-anchor" href="#代码从编写到执行的全过程" aria-hidden="true">#</a> 代码从编写到执行的全过程</h4><ul><li>开发人员用编程语言写程序，写完的程序，一开始是一个个代码文件，如果要让这个程序可以运行，需要把写好的程序文件使用编译器（也是一种程序）翻译成计算机cpu能理解的二进制语言的文件，然后存在电脑的硬盘中（安装的过程），如果要执行这个程序，cpu会把这个程序的二进制文件数据会加载到内存中被cpu执行，这样这个程序就运行了。 ![[代码从编写到执行的全过程-1.png]]</li><li>在这个过程中最重要的硬件是内存，后面还会经常提到它。因为后面会学习到一些非常抽象的难理解的概念，都是跟内存相关的。</li></ul><h2 id="_1-2-绕不开的二进制" tabindex="-1"><a class="header-anchor" href="#_1-2-绕不开的二进制" aria-hidden="true">#</a> 1.2 绕不开的二进制</h2><p>——进制的最大特点是 几进制就看不见几</p><h3 id="二进制" tabindex="-1"><a class="header-anchor" href="#二进制" aria-hidden="true">#</a> 二进制</h3><ul><li>逢2进1 只有0和1</li><li>在JS中“0b”开头表示是二进制数字</li></ul><h3 id="八进制" tabindex="-1"><a class="header-anchor" href="#八进制" aria-hidden="true">#</a> 八进制</h3><ul><li>逢8进1 没有8及以上的数字</li><li>在编程语言中 “0”开头的数字 表示的就是8进制数。开头的0是作为能让代码的编译器在翻译代码的时候用到的辨识方法。本身是识别的作用无任何数字意义。</li><li>如果没有0就会当成十进制数据处理。</li><li>077 在代码中就表示 这是一个八进制数</li></ul><h3 id="十六进制" tabindex="-1"><a class="header-anchor" href="#十六进制" aria-hidden="true">#</a> 十六进制</h3><ul><li>逢16进1</li><li>0、1、2、3、4、5、6、7、8、9和字母A、B、C、D、E、F（a、b、c、d、e、f）表示，其中:A<sub>F表示10</sub>15，大小写都可以</li><li>在编程语言中 “0x”开头的表示就是16进制数</li><li>0x只作为编译器识别数字的进制作用，不代表任何数值</li><li>0x123 在代码中就表示这是一个十六进制数</li></ul><h3 id="进制的换算" tabindex="-1"><a class="header-anchor" href="#进制的换算" aria-hidden="true">#</a> 进制的换算</h3><ul><li><p>不同的进制 换算成十进制 只要更换2这个进制的基底</p></li><li><p>八进制的开头0是可以不用计算的 ![[不同的进制 换算成十进制 只要更换2这个进制的基底.png]]</p></li><li><p>如果遇到需要把十进制或者把其他进制转换成二进制的需求自行查找进制转换工具</p></li></ul><h3 id="为什么要用十六进制和八进制" tabindex="-1"><a class="header-anchor" href="#为什么要用十六进制和八进制" aria-hidden="true">#</a> 为什么要用十六进制和八进制</h3><ul><li>二进制是计算机能识别的最直接的语言，但二进制位数太多了不方便记录</li><li>用八进制和十六进制进行数据存储比较合适</li><li>为什么不把二进制转换为十进制呢？</li><li>因为二进制转换为十进制比较麻烦，不够直观计算量大。而二进制转换为八进制或十六进制比较方便不用进行复杂的计算。从而在保证便利性的情况下不用额外增加计算机的额外性能损耗。</li></ul><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><p>二进制1010010转换为十进制 =82 八进制7123转换为十进制 =3667 十六进制9abc转换为十进制 约等于四万</p><ul><li>十六进制能用很小的位数表示很大的数量</li></ul><h2 id="_1-3-数据单位" tabindex="-1"><a class="header-anchor" href="#_1-3-数据单位" aria-hidden="true">#</a> 1.3 数据单位</h2><h3 id="计算机中的数据单位" tabindex="-1"><a class="header-anchor" href="#计算机中的数据单位" aria-hidden="true">#</a> 计算机中的数据单位</h3><ul><li>计算机中最小的数据单位是bit 比特，1bit是最小的数据</li></ul><h4 id="为什么1bit最小" tabindex="-1"><a class="header-anchor" href="#为什么1bit最小" aria-hidden="true">#</a> 为什么1bit最小？</h4><ul><li><p>用内存来说明</p></li><li><p>可以把一个比特的数据想象成一个很小的电子元件，内存条里铺满了很多这样的小小电子元件。</p></li><li><p>CPU在读取数据的时候会通过这些小元件的电压高低来判断他存储的数据是0还是1.如果检测到这个电子元件的电压是高电压CPU就会认为里面存储的数据是1，否则是0。</p></li><li><p>写入也是同理。通过设置这些小的电子元件的电压高低来写入到内存当中。</p></li><li><p>无论什么数据都可通过这种形式转换为二进制 ![[CPU通过电压判断每个bit存储的是1还是0.png]]</p></li><li><p>但是在实际操作中，内存中的这些bit会被打包成一组一组来使用，而不是单独使用1bit这样的tiny电子元件去处理数据。</p></li><li><p>一组是8bit，被命名为1Byte字节</p></li><li><p>CPU能处理的最小数据单位是Byte</p></li><li><p>在内存中哪怕是存一个1 也需要占满一个字节 也就是 0000 0001 用满8个比特位 ![[存1也要用满8bit.png]]</p></li></ul><h4 id="其他的数据单位" tabindex="-1"><a class="header-anchor" href="#其他的数据单位" aria-hidden="true">#</a> 其他的数据单位</h4><ul><li><p>1 KiB = 1024Byte；1 KB = 1000Byte</p></li><li><p>1MiB= 1024KiB；1MB= 1000KB</p></li><li><p>1GiB = 1024MiB ；1GB = 1000MB</p></li><li><p>1TiB=1024GiB；1TB=1000GB</p></li><li><p>cpu可操作的数据都是以Byte 字节为单位的</p></li><li><p>所谓KB，MB，GB只是为了更方便表示大量字节数的一种别称</p></li><li><p>内存条中的tiny电子元件被打包成8个一组的字节来使用</p></li><li><p>可以把内存想象成是一个巨大储物柜，这个柜子上的一个储物格子就是一个字节，里面有8个bit这样的电子元件 ![[内存是巨大的储物柜字节是储物格.png]]</p></li><li><p>任何数据要放在这个储物柜，至少要占用一个这样的储物格。</p></li><li><p>另外每个储物格子上都有自己的编号，编号就是内存地址</p></li><li><p>内存中这样的存储空间太多了。例如一条16个g的内存条有几十亿上百亿这个小小字节的存储格。</p></li><li><p>所以存储格的编号也就是内存地址是用十六进制的数来表示的</p></li><li><p>cpu通过存储数据的内存地址来准确地在内存中相应存储空间进行读取或者写入数据</p></li></ul><h4 id="课后问题" tabindex="-1"><a class="header-anchor" href="#课后问题" aria-hidden="true">#</a> 课后问题</h4><p>二进制数据1001010010在内存中会占用多少个比特位？ 答：2个byte，也就是16个bit位</p><h2 id="_1-4-聊一聊浏览器" tabindex="-1"><a class="header-anchor" href="#_1-4-聊一聊浏览器" aria-hidden="true">#</a> 1.4 聊一聊浏览器</h2><h3 id="浏览器的发动机" tabindex="-1"><a class="header-anchor" href="#浏览器的发动机" aria-hidden="true">#</a> 浏览器的发动机</h3><p>浏览器的有两台发动机，一台是渲染引擎（内核）负责把页面样式渲染出来显示，一台是JS引擎（JS代码编译器）负责执行JS代码，让页面具有复杂交互能力 ![[浏览器两大内置引擎.png]]</p><p>![[主流浏览器内核.png]] ![[主流浏览器js引擎.png]]</p><h3 id="几个知识点" tabindex="-1"><a class="header-anchor" href="#几个知识点" aria-hidden="true">#</a> 几个知识点</h3><ul><li>每种编程语言都有语言规范和语言标准，而且这个标准和规范是会不断更新和迭代的，而该语言的编译器，也会根据语言标准的更新不断迭代，你可以<strong>把语言的编译器理解为是语言标准的其中一种软件实现</strong></li><li>前端几门语言的标准维护者更新者是国际组织，与这几门语言的使用者——装着语言编译器的浏览器的各个互联网公司是割裂的，容易存在标准执行不到位，各个浏览器执行同一套代码会有差异的问题</li><li>ECMAScript 一般指的是JavaScript这个语言的标准</li></ul>',41),d=[r];function t(n,p){return a(),l("div",null,d)}const s=i(h,[["render",t],["__file","chapter1.html.vue"]]);export{s as default};
